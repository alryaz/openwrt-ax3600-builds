name: Build OpenWrt for specific target and release
run-name: >-
  Build OpenWrt
  ${{ (github.event_name == 'workflow_dispatch' && 'manually') || (github.event_name == 'schedule' && 'on schedule') || (github.event_name == 'push' && 'on update') || 'unexpectedly' }}
  for reference
  ${{ (github.event_name == 'workflow_dispatch' && inputs.repository_ref != '') && inputs.repository_ref || github.ref_name }}
  

on:
  workflow_dispatch:
    inputs:
      repository_ref:
        description: Branch or commit
        type: string
        default: ''
      variations:
        description: Build variations, comma-separated
        type: string
        default: ''
  schedule:
    - cron: "0 */2 * * *"

env:
  # Upstream OpenWRT repository
  REMOTE_REPOSITORY: qosmio/openwrt-ipq
  REMOTE_BRANCH: main-nss

  # Packages repository
  NSS_PACKAGES_REPOSITORY: qosmio/nss-packages
  NSS_PACKAGES_BRANCH: NSS-12.5-K6.x

  # Other sources
  CONFIG_FILE: ax3600.config
  CUSTOM_FILES_PATH: files
  RELEASE_PREFIX: main-nss

jobs:
  check_commits:
    name: Check for new commits
    runs-on: ubuntu-latest
    outputs:
      variations: ${{ steps.save_variations.outputs.variations }}
      new_commits: ${{ steps.check_commits.outputs.new_commits }}
      latest_sha_remote: ${{ steps.check_commits.outputs.latest_sha_remote }}
      latest_sha_nss_packages: ${{ steps.check_commits.outputs.latest_sha_nss_packages }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Save variations
        id: save_variations
        run: |
          if [ ! -z "${{ inputs.variations }}" ]; then
            echo "Before filtering: ${{ inputs.variations }}"
            variations=$(echo "${{ inputs.variations }}" | tr ',' '\n' | sed '/^[[:space:]]*$/d' | sort | uniq)
            echo "After filtering: $variations"
          fi
          if [ -z "$variations" ]; then
            echo "No variations via input provided"
            variations=$(find variations -maxdepth 1 -type f -name '*.config' -exec basename {} .config \; | jq -R . | jq -cs .)
          else
            for variation in $variations; do
              if [ ! -f "variations/$variation.config" ]; then
                echo "::error::Variation '$variation' is not supported by this repository"
                exit 1
              fi
            done
            variations=$(echo -n "$variations" | jq -Rcs 'split("\n")')
          fi

          echo "variations=$variations" | tee -a $GITHUB_OUTPUT

      - name: Check for new commits in both repositories
        id: check_commits
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          release_body=$(gh api "repos/${{ github.repository }}/releases/latest" --jq .body || echo "")
          new_commits="false"
          for prefix in "REMOTE" "NSS_PACKAGES"; do
              postfix="$(echo "${prefix}" | tr '[:upper:]' '[:lower:]')"
              echo "::group::Processing ${postfix} repository for new commits"
              repo="${prefix}_REPOSITORY"
              branch="${prefix}_BRANCH"
              latest_sha=$(gh api "repos/${!repo}/commits/${!branch}" --jq .sha)
              if [ -z "${latest_sha}" ]; then
                  echo "::error::SHA not found on ${prefix}"
                  exit 1
              fi
              echo "Latest ${prefix} commit: ${latest_sha}"
              echo "latest_sha_${postfix}=${latest_sha}" >> $GITHUB_OUTPUT
              echo $release_body | grep -q "${latest_sha}" && continue
              echo "::notice::New commits detected on ${postfix} repository!"
              new_commits="true"
              echo "::endgroup::"
          done
          echo "new_commits=${new_commits}" >> $GITHUB_OUTPUT

  build:
    name: "Build variation: ${{ matrix.variation }}"
    if: |
      (github.event_name == 'workflow_dispatch') &&
      (needs.check_commits.result != 'failed') ||
      (needs.check_commits.result == 'success') &&
      ((inputs.repository_ref || github.ref_name) == 'main') &&
      (needs.check_commits.outputs.new_commits == 'true')
    needs: check_commits
    strategy:
      matrix:
        variation: ${{ fromJSON(needs.check_commits.outputs.variations) }}
      fail-fast: true
    runs-on: ubuntu-latest
    steps:
      - name: Check umask prior to cloning
        run: |
          echo "Current ACLs:"
          getfacl -d .

          echo "Setting default ACLs"
          setfacl -d --set u::rwx,g::rx,o::rx .

          echo "Updated ACLs:"
          getfacl -d .

      # This intentionally uses the run command instead of a determined checkout
      # action because the checkout action severs reflog, causing the release
      # number generation script of OpenWRT to fail and return '0' instead of
      # actual number, resulting in 'r0' appended to the release version.
      - name: Checkout remote repository
        run: |
          umask 0022
          git clone "${GITHUB_SERVER_URL}/${{ env.REMOTE_REPOSITORY }}.git" \
            "build_repo" \
            --single-branch \
            --branch "${{ env.REMOTE_BRANCH }}"

          echo "ACLs on build repository after cloning:"
          getfacl -d build_repo

      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          path: "custom_repo"
          ref: ${{ (github.event_name == 'workflow_dispatch' && inputs.repository_ref != '') && inputs.repository_ref || github.ref_name }}

      - name: Install dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          echo "::group::Updating repositories"
          sudo apt update
          echo "::endgroup::"

          # echo "::group::Upgrading software"
          # sudo apt-mark hold firefox
          # sudo apt full-upgrade -y
          # echo "::endgroup::"

          echo "::group::Installing requirements"
          sudo apt install -y \
            build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget libelf-dev
          echo "::endgroup::"

      - name: Update and install feeds
        run: |
          umask 0022
          cd build_repo
          echo "::group::Update feeds"
          ./scripts/feeds update -a
          echo "::endgroup::"
          echo "::group::Install feeds"
          ./scripts/feeds install -a
          echo "::endgroup::"

      - name: Add Argon theme
        run: |
          echo "::group::Cloning Argon theme repository"
          git clone "${GITHUB_SERVER_URL}/jerrykuku/luci-theme-argon.git" \
            --single-branch --branch master
          echo "::endgroup::"
          echo "::group::Cloning Argon configurator application repository"
          git clone "${GITHUB_SERVER_URL}/jerrykuku/luci-app-argon-config.git" \
            --single-branch --branch master
          echo "::endgroup::"
  
      - name: Add custom patches
        run: |
          if [ "$(ls custom_repo/patches)" ]; then
            umask 0022
            mv custom_repo/patches/* build_repo/
            cd build_repo
            for patch in *.patch; do
              echo "::group::Applying patch '$patch'"
              git apply --verbose "$patch"
              echo "=== Diff after applying $patch ==="
              git diff HEAD
              echo "::endgroup::"
            done
            echo "::group::Changed files after patch application:"
            git status
            echo "::endgroup::"
          fi
  
      - name: Configure ${{ matrix.variation }} firmware image
        run: |
          umask 0022
          cat \
            "custom_repo/${{ env.CONFIG_FILE }}" \
            "custom_repo/variations/${{ matrix.variation }}.config" \
            > build_repo/.config

      - name: Upload pre-defaulted config as artifact
        uses: actions/upload-artifact@v4
        with:
          name: config-pre-{{ matrix.variation }}
          path: build_repo/.config

      - name: Apply default configuration of openwrt
        run: |
          umask 0022
          cd build_repo
          make defconfig -j$(nproc)
          echo "CONFIG_HASH=$(md5sum build_repo/.config | awk '{print $1}')" | tee -a $GITHUB_ENV

      - name: Upload post-defaulted config as artifact
        if: failure() && steps.pin_down_error.conclusion == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: config-post-{{ matrix.variation }}
          path: build_repo/.config

      - name: Include custom files
        run: |
          umask 0022
          mkdir -p "build_repo/files"
          rsync -rvP --no-perms --no-owner --no-group \
            "custom_repo/${{ env.CUSTOM_FILES_PATH }}/" \
            "build_repo/files/"
          if [ -d "custom_repo/variations/${{ matrix.variation }}" ]; then
            rsync -rvP --no-perms --no-owner --no-group \
              "custom_repo/variations/${{ matrix.variation }}/" \
              "build_repo/files/"
          fi

      - name: Download dependencies (multicore, unverbose)
        id: download_multiple_cores
        run: umask 0022 && cd build_repo && make download -j$(($(nproc)+1))

      - name: Download dependencies (single core, verbose)
        if: failure() && steps.download_multiple_cores.conclusion == 'failure'
        id: download_single_core
        run: umask 0022 && cd build_repo && make download V=sc -j1

      - name: Build the firmware image (multicore, unverbose)
        id: build_multiple_cores
        run: umask 0022 && cd build_repo && make world -j$(($(nproc)+1))

      - name: Build the firmware image (single core, unverbose)
        if: failure() && steps.build_multiple_cores.conclusion == 'failure'
        id: build_single_core
        run: umask 0022 && cd build_repo && make world V=sc -j1

      - name: Build the firmware image (single core, verbose)
        if: failure() && steps.build_single_core.conclusion == 'failure'
        id: pin_down_error
        run: umask 0022 && cd build_repo && make world V=sc -j1 | tee build_error.log

      - name: Upload error log as artifact
        if: failure() && steps.pin_down_error.conclusion == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: build-error-{{ matrix.variation }}
          path: build_repo/build_error.log
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ipq807x-images-${{ matrix.variation }}
          path: build_repo/bin/targets/qualcommax/ipq807x
          if-no-files-found: 'error'

  release:
    name: Create release
    needs: [check_commits, build]
    if: |
      (needs.build.result == 'success') &&
      ((inputs.repository_ref || github.ref_name) == 'main')
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ipq807x-images-*
          path: firmware
          merge-multiple: false

      - name: Get current date
        run: echo "RELEASE_DATE=$(date +%F)" >> $GITHUB_ENV

      - name: Format release uploads
        run: |
          cd firmware/
          for directory in ipq807x-images-*; do
            cd $directory
            variation="${directory#*-*-}"
            prefix="xiaomi_ax3600-${variation}-${{ env.RELEASE_PREFIX }}-${{ env.RELEASE_DATE }}"
            echo "::group::Processing images for variation: $variation"
            
            # zip -r $directory.zip *
            # mv $directory.zip ../

            tar --zstd -cvf "${prefix}-images.tar.zst" *
            mv "${prefix}-images.tar.zst" ../

            mv \
                "openwrt-qualcommax-ipq807x-xiaomi_ax3600-squashfs-sysupgrade.bin" \
                "../${prefix}-sysupgrade.bin"

            cd ../
            rm -rf $directory/
            echo "::endgroup::"
          done

      - name: Delete current release assets
        uses: andreaswilli/delete-release-assets-action@main
        continue-on-error: true
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.RELEASE_PREFIX }}-${{ env.RELEASE_DATE }}

      - name: Create release
        uses: softprops/action-gh-release@master
        with:
          files: firmware/*
          tag_name: ${{ env.RELEASE_PREFIX }}-${{ env.RELEASE_DATE }}
          name: 🚀 OpenWrt Build Release ${{ env.RELEASE_DATE }}
          body: |
            ## 📦 OpenWrt Automated Build Release

            **Build Date:** ${{ env.RELEASE_DATE }}

            ### 🔄 Main Repository
            **Repository:** [${{ env.REMOTE_REPOSITORY }}](https://github.com/${{ env.REMOTE_REPOSITORY }})
            **Branch:** `${{ env.REMOTE_BRANCH }}`
            **Commit:** [`${{ needs.check_commits.outputs.latest_sha_remote }}`](https://github.com/${{ env.REMOTE_REPOSITORY }}/commit/${{ needs.check_commits.outputs.latest_sha_remote }})

            ### 📦 NSS Packages
            **Repository:** [${{ env.NSS_PACKAGES_REPOSITORY }}](https://github.com/${{ env.NSS_PACKAGES_REPOSITORY }})
            **Branch:** `${{ env.NSS_PACKAGES_BRANCH }}`
            **Commit:** [`${{ needs.check_commits.outputs.latest_sha_nss_packages }}`](https://github.com/${{ env.NSS_PACKAGES_REPOSITORY }}/commit/${{ needs.check_commits.outputs.latest_sha_nss_packages }})

            ### 📝 Build Information
            - **Target:** [Xiaomi Mi AIoT Router AX3600](https://openwrt.org/toh/xiaomi/ax3600)
            - **Base configuration:** [`${{ env.CONFIG_FILE }}`](${{ env.CONFIG_FILE }})

            ### 📋 Notes
            - Automated build triggered by ${{ github.event_name }}
            - Previous releases are automatically cleaned up (keeping latest 2)
            ---
            _Generated by GitHub Actions 🤖_

      - name: Clean up old releases
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: 2
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
